# @package _global_
#package global is neccessary!
defaults:
  - override /datamodule: BirdSet.yaml
  - override /module: multilabel.yaml
  - override /module/network: beats.yaml
  - override /callbacks: default.yaml
  - override /trainer: single_gpu.yaml
  - override /datamodule/transforms: bird_default_multilabel.yaml
  - override /paths: default.yaml
  - override /hydra: default.yaml
tags: ["biofoundation", "BirdSet", "augmentations", "pooling", "${module.network.model_name}", "${module.network.model.pooling}"]                                               
seed: 1
train: True
test: True
 
logger:
  wandb:
    tags: ${tags}
    group: "biofoundation_${module.network.model_name}_pooling_${module.network.model.pooling}_BirdSet__${datamodule.dataset.dataset_name}"
    mode: online
    version: ${module.network.model_name}_${module.network.model.pooling}_BirdSet_${datamodule.dataset.dataset_name}_${seed}_${start_time} #to resume train run # needs to be tested
 
module:
  optimizer:
    lr: 5e-3
    weight_decay: 5e-4
  loss:
  #  _target_: birdset.modules.losses.asymmetric_loss.AsymmetricLossMultiLabel
    _target_: torch.nn.BCEWithLogitsLoss
  #_target_: birdset.modules.losses.focal_loss.MultiLabelFocalLoss
  network:
    torch_compile: False
    model:
      preprocess_in_model: True
      freeze_backbone: True
      classifier:
        _target_: biofoundation.modules.models.linear_classifier.LinearClassifier
        num_classes: ${module.network.model.num_classes}
        in_features: ${module.network.embedding_size}
    # pretrain_info:
    #   hf_path: DBD-research-group/BirdSet
    #   hf_name: SNE
    #   hf_pretrain_name: null
 
trainer:
  min_epochs: 1
  max_epochs: 15
  devices: [2]
 
datamodule:
  dataset:
    hf_name: 'POW'
    dataset_name: 'POW'
    use_test_as_valid: True
    val_split: 0.2
    class_weights_loss: null
    class_weights_sampler: null
    classlimit: 600
    eventlimit: 5
  transforms:
    max_length: ${module.network.length}
    preprocessing:
        normalize_waveform: null
        normalize_spectrogram: null
    nocall_sampler:
      length: ${module.network.length}
 
 
  loaders:
    train:
      batch_size: 128
      shuffle: True
      num_workers: 16
      drop_last: True
      prefetch_factor: 2
 
    valid:
      batch_size: 128
      num_workers: 16
      shuffle: False
   
    test:
      batch_size: 128
      num_workers: 16
      shuffle: False
 
  mapper:
    biggest_cluster: True
    no_call: False
 
callbacks:
  model_checkpoint:
    monitor: "val/BCEWithLogitsLoss/dataloader_idx_0" 
    save_top_k: 1
    every_n_train_steps: null
  early_stopping:
    _target_: lightning.pytorch.callbacks.EarlyStopping
    monitor: "val/cmAP/dataloader_idx_1" 
    patience: 5
    mode: 'max'
    min_delta: 1e-3
    verbose: False
    check_finite: True