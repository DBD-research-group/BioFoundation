program: birdset/train.py  
name: full # Name of the sweep
entity: deepbirddetect
project: BioFoundation
method: bayes  # random, grid, or bayes
metric:
  name: val/cmAP  # Metric to optimize
  goal: maximize
parameters:
  experiment:
    values: [biofoundation/birdset/linearprobing/perch_sweep] # The hydra experiment
  trainer.devices:
    values: [1]
  module.optimizer.lr:
    min: 0.0001 
    max: 0.1  
  module.optimizer.weight_decay:
    min: 0.000001
    max: 0.1  
  datamodule.loaders.train.batch_size:
    values: [16, 32, 64, 128, 256, 512] 
  +module.network.model.classifier:
    values: 
      - '{_target_: torch.nn.Sequential, _args_: [{_target_: torch.nn.Linear, in_features: ${module.network.embedding_size}, out_features: 128}, {_target_: torch.nn.ReLU}, {_target_: torch.nn.Dropout, p: 0.5}, {_target_: torch.nn.Linear, in_features: 128, out_features: 64}, {_target_: torch.nn.ReLU}, {_target_: torch.nn.Linear, in_features: 64, out_features: ${module.network.model.num_classes}}]}'
      - '{_target_: birdset.modules.models.linear_classifier.LinearClassifier, in_features: ${module.network.embedding_size}, num_classes: ${module.network.model.num_classes}}'
      - '{_target_: torch.nn.Sequential, _args_: [{_target_: torch.nn.Linear, in_features: ${module.network.embedding_size}, out_features: 512}, {_target_: torch.nn.ReLU}, {_target_: torch.nn.Dropout, p: 0.3}, {_target_: torch.nn.Linear, in_features: 512, out_features: 256}, {_target_: torch.nn.ReLU}, {_target_: torch.nn.Linear, in_features: 256, out_features: ${module.network.model.num_classes}}]}'
      - '{_target_: torch.nn.Sequential, _args_: [{_target_: torch.nn.Linear, in_features: ${module.network.embedding_size}, out_features: 1024}, {_target_: torch.nn.ReLU}, {_target_: torch.nn.Dropout, p: 0.4}, {_target_: torch.nn.Linear, in_features: 1024, out_features: 512}, {_target_: torch.nn.ReLU}, {_target_: torch.nn.Linear, in_features: 512, out_features: ${module.network.model.num_classes}}]}'
      - '{_target_: torch.nn.Sequential, _args_: [{_target_: torch.nn.Linear, in_features: ${module.network.embedding_size}, out_features: 256}, {_target_: torch.nn.ReLU}, {_target_: torch.nn.BatchNorm1d, num_features: 256}, {_target_: torch.nn.Dropout, p: 0.5}, {_target_: torch.nn.Linear, in_features: 256, out_features: ${module.network.model.num_classes}}]}'
  
  # The different classifiers:
  # Perch classifier
  # Simple classifier
  # Deeper Fully Connected Classifier
  # Wide Classifier with More Units
  # Classifier with Batch Normalization

command:
  - ${env}
  - python
  - ${program}
  - ${args_no_hyphens}



